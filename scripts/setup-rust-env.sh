#!/bin/bash
set -e # Zatrzymuje skrypt w przypadku bÅ‚Ä™du

echo "ðŸš€ --- Przygotowywanie Å›rodowiska dla Rdzenia w RuÅ›cie --- ðŸš€"

# Sprawdzenie czy Rust jest juÅ¼ zainstalowany
if command -v rustc &> /dev/null; then
    echo "âœ… Rust jest juÅ¼ zainstalowany: $(rustc --version)"
else
    echo "ðŸ“¦ Instalacja Rusta..."
    # Instalacja Rusta
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    echo "âœ… Rust zostaÅ‚ zainstalowany: $(rustc --version)"
fi

# Sprawdzenie czy Maturin jest juÅ¼ zainstalowany
if command -v maturin &> /dev/null; then
    echo "âœ… Maturin jest juÅ¼ zainstalowany: $(maturin --version)"
else
    echo "ðŸ“¦ Instalacja Maturin do budowania rozszerzeÅ„ Pythona..."
    # Instalacja Maturin do budowania rozszerzeÅ„ Pythona
    pip install maturin
    echo "âœ… Maturin zostaÅ‚ zainstalowany: $(maturin --version)"
fi

# Instalacja dodatkowych narzÄ™dzi Rust
echo "ðŸ“¦ Instalacja dodatkowych narzÄ™dzi Rust..."
rustup component add rustfmt clippy

# Sprawdzenie czy cargo-watch jest zainstalowany (przydatne do development)
if ! cargo install --list | grep -q "cargo-watch"; then
    echo "ðŸ“¦ Instalacja cargo-watch dla hot reload..."
    cargo install cargo-watch
fi

echo "ðŸ”§ Konfiguracja Å›rodowiska..."
# Dodanie cargo bin do PATH jeÅ›li nie jest juÅ¼ dodane
if ! echo "$PATH" | grep -q "$HOME/.cargo/bin"; then
    echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
    export PATH="$HOME/.cargo/bin:$PATH"
fi

echo "âœ… Åšrodowisko Rusta jest w peÅ‚ni gotowe do pracy z projektem sniper-core!"
echo "ðŸ“‹ Zainstalowane komponenty:"
echo "   - Rust: $(rustc --version)"
echo "   - Cargo: $(cargo --version)"
echo "   - Maturin: $(maturin --version)"
echo "   - Rustfmt: $(rustfmt --version)"
echo "   - Clippy: $(cargo clippy --version)"
echo ""
echo "ðŸŽ¯ Projekt gotowy do stworzenia architektury hybrydowej Rust + Python!"
echo "ðŸ“– SprawdÅº AUGMENT_MEMORY_V1.md dla peÅ‚nej specyfikacji."
